/** * Copyright (c) 2010 Henry Tseng (http://www.henrytseng.com) *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package halogen.datastructures.tree {	/**	 * @author henry	 */	public class BSTNode {		internal var _key : BSTKey;		internal var _data : *;				/** Node on left branch */		public var left : BSTNode;				/** Node on right branch */		public var right : BSTNode;				/** Parent node */		public var parent : BSTNode;				/**		 * Constructor		 */		public function BSTNode($key:BSTKey, $data:*) {			_key = $key;			_data = $data;		}				public function get key():BSTKey { return _key; }				public function get data():* { return _data; }				/**		 * Calculates levels of depth from this node.		 */		public function getDepth():int {			var rightDepth:int = 0;			var leftDepth:int = 0;			if(right) rightDepth = right.getDepth();			if(left) leftDepth = left.getDepth();			return (right>left) ? rightDepth+1 : leftDepth+1;		}				/**		 * Calculates size of tree from this node		 */		public function getSize():int {			var rightDepth:int = 0;			var leftDepth:int = 0;			if(right) rightDepth = right.getDepth();			if(left) leftDepth = left.getDepth();			return rightDepth+leftDepth+1;		}				/**		 * Sets data in node on left or creates new node		 * @param $key		 * @param $data		 * @return		 */		public function insertLeft($key:BSTKey, $data:*):BSTNode {			if(left) {				left._data = $data;							} else {				left = new BSTNode($key, $data);				left.parent = this;			}			return left;		}				/**		 * Sets data in node on right or creates new node		 * @param $key		 * @param $data		 * @return		 */		public function insertRight($key:BSTKey, $data:*):BSTNode {			if(right) {				right._data = $data;							} else {				right = new BSTNode($key, $data);				right.parent = this;			}			return right;		}				/**		 * Checks if current node is connected to parent from left branch		 */		public function isLeft():Boolean {			if(!parent) return false; 			return parent.left == this;		}				/**		 * Checks if current node is connected to parent from right branch		 */		public function isRight():Boolean {			if(!parent) return false; 			return parent.right == this;		}				public function toString():String { return '[BSTNode '+_key.value+':'+_data+']'; }				/**		 * Destroys entire tree below this node		 */		public function destroy():void {			_key.destroy();			_key=null;			_data=null;			if(left) {				left.destroy();				left=null;			}			if(right) {				right.destroy();				right=null;			}			parent=null;		}	}}