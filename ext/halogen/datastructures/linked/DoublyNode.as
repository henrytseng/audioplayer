/** * Copyright (c) 2010 Henry Tseng (http://www.henrytseng.com) *  * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the "Software"), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: *  * The above copyright notice and this permission notice shall be included in * all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN * THE SOFTWARE. */package halogen.datastructures.linked {	/**	 * A node for a doubly linked list.	 *   	 * @author henry	 */	public class DoublyNode {		internal var _next : DoublyNode;		internal var _prev : DoublyNode;		internal var _data : *;				/**		 * Constructor		 */		public function DoublyNode($data:*) {			_data = $data;		}				/**		 * Internal function to insert a node after this node and remap references.  		 * @param $node node to insert		 */		internal function _insertAfter($node:DoublyNode):void {			// failure			if($node==null) return;						if(_next) {				_next._prev = $node;				$node._next = _next;			}			_next = $node;			$node._prev = this; 		}				/**		 * Internal function to insert a node before this node and remap references.  		 * @param $node node to insert		 */		internal function _insertBefore($node:DoublyNode):void {			// failure			if($node==null) return;						if(_prev) {				_prev._next = $node;				$node._prev = _prev;			}			_prev = $node;			$node._next = this;		}				/**		 * Internal function to remove node suceeding node and remap references.		 * @return node removed  		 */		 internal function _removeAfter():DoublyNode {		 	var node:DoublyNode = _next;		 	_next=node._next;		 	if(_next) _next._prev = this;		 	node._next = null;		 	node._prev = null;		 	return node;		}				/**		 * Internal function to remove node preceding node and remap references.  		 * @return node removed  		 */		 internal function _removeBefore():DoublyNode {		 	var node:DoublyNode = _prev;		 	_prev=node._prev;		 	if(_prev) _prev._next = this;		 	node._next = null;		 	node._prev = null;		 	return node;		 }				/**		 * Destroy		 */		public function destroy():void {			_next = null;			_prev = null;			_data = null;		}				public function toString():String { return '[DoublyNode '+_data+']'; }	}}